syntax = "proto2";

message SymbolParameter {
    required string symbol_id = 1;
    required string symbol_name = 2;
    // the symbol_desc should be a JSON defined by frontend
    required string symbol_desc = 3;
}

message SymbolCreateState {
    required string symbol_id = 1;
    required int32 state_code = 2 [default = 0];
    required string state_desc = 3 [default = 'SUCCESSFUL'];
}

message TaskParameter {
    required TaskId id = 1;
    // the task_desc should be a JSON
    required string task_desc = 2;
}

message TaskId {
    required string task_id = 1;
}

message TaskState {
    required string task_id = 1;
    required int32 state_code = 2 [default = 0];
    required string state_desc = 3 [default = 'OK_TO_RUN'];
}

message ClsInferenceRequest {
    required string net = 1;
    required string prefix = 2;
    required string epoch = 3;
    required int32 batch_size = 4 [default = 1];
    repeated string urls = 5;
    required int32 top_k = 6 [default = 1];
    map<string, int32> ctx = 7;
}

message ClsInferenceResult {
    map<string, SingleImgClsResult> result = 1;
}

message SingleImgClsResult {
    repeated float top_k_probs = 1;
    repeated string top_k_categorys = 2;
}

message RecordIORequest {
    required string image_root = 1;
    required string label_lst_path = 2;
    map<string, string> config = 4;
}

message RecordIOCreateState {
    required int32 state_code = 1 [default = 0];
    required string state_desc = 2 [default = 'SUCCESSFUL'];
}

service MXNetService {
    rpc createClsRecordIOFiles(RecordIORequest) returns(RecordIOCreateState){};
    rpc createSymbol(SymbolParameter) returns(SymbolCreateState){};
    rpc startTask(TaskParameter) returns(TaskState){};
    rpc clsInference(ClsInferenceRequest) returns(ClsInferenceResult){};
    rpc stopTask(TaskId) returns(TaskState){};
}